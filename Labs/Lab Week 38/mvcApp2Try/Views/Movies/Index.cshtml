@model IEnumerable<mvcApp2Try.Models.Movie>

@{
    ViewData["Title"] = "Index";
}
<!--scaffolding automatically included the following SnabelA/add_model statement at the top of the Index.cshtml file-->
<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<!--
    The HTML <form> tag uses the Form Tag Helper, so when you submit the form, the filter string is posted to the Index action
    of the movies controller.
-->
<!--
    <form asp-controller="Movies" asp-action="Index"> 
-->
    <!--
    Now when you submit a search, the URL contains the search query string.
    Searching will also go to the HttpGet Index action method, even if you have a HttpPost Index method.
    -->
<form asp-controller="Movies" asp-action="Index" method="get">
    <p>
        Title: <input type="text" name="SearchString">
        <input type="submit" value="Search" />
    </p>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ReleaseDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Genre)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Price)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ReleaseDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Genre)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Price)
                </td>
                <td>
                    <!--
                        The Edit, Details, and Delete links are generated by the Core MVC Anchor Tag Helper
                        in the Views/Movies/Index.cshtml file.
                    -->
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                    <!--
                    Because the Model object is strongly typed (as an IEnumerable<Movie> object), each item in the loop is typed as Movie.
                    Among other benefits, this means that you get compile time checking of the code:
                    -->
                </td>
            </tr>
        }
    </tbody>
</table>
