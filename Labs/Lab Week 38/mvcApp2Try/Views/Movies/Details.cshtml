@model mvcApp2Try.Models.Movie

@{
    ViewData["Title"] = "Details";
}

<!--
By including a SnabelA/add_model statement at the top of the view file, you can specify the type of object that the view expects.
    When you created the movie controller, the following
    SnabelA/add_model statement was automatically included at the top of the Details.cshtml file:

    This SnabelA/add_model directive allows you to access the movie that the controller passed to the view by using a Model object that's strongly typed.
    For example, in the Details.cshtml view, the code passes each movie field
    to the DisplayNameFor and DisplayFor HTML Helpers with the strongly typed Model object.
    The Create and Edit methods and views also pass a Movie model object.
-->
<h1>Details</h1>

<div>
    <h4>Movie</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Title)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Title)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.ReleaseDate)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.ReleaseDate)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Genre)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Genre)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Price)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Price)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>
